# Step 1: Install libtorrent and initialize session
!apt install -y python3-libtorrent
!python -m pip install lbry-libtorrent

import libtorrent as lt
import time
from google.colab import drive, files
from IPython.display import display
import ipywidgets as widgets

# Initialize torrent session
ses = lt.session()
ses.listen_on(6881, 6891)
downloads = []

# Step 2: Mount Google Drive
drive.mount("/content/drive")

# Set save path
save_path = "/content/drive/My Drive/Torrent"

# Step 3: Add From Torrent File
def add_torrent_file():
    source = files.upload()
    for filename in source.keys():
        params = {
            "save_path": save_path,
            "ti": lt.torrent_info(filename),
        }
        downloads.append(ses.add_torrent(params))
        print(f"Added {filename} to downloads.")

# Step 4: Add From Magnet Link
def add_magnet_links():
    while True:
        magnet_link = input("Enter Magnet Link or type 'exit' to finish: ")
        if magnet_link.lower() == "exit":
            break
        params = {"save_path": save_path}
        downloads.append(lt.add_magnet_uri(ses, magnet_link, params))
        print("Magnet link added.")

# Ask user for torrent file or magnet link
choice = input("Do you want to upload a torrent file (1) or enter a magnet link (2)? ")

if choice == "1":
    add_torrent_file()
elif choice == "2":
    add_magnet_links()
else:
    print("Invalid choice. Exiting.")

# Step 5: Start Download
state_str = [
    "queued",
    "checking",
    "downloading metadata",
    "downloading",
    "finished",
    "seeding",
    "allocating",
    "checking fastresume",
]

layout = widgets.Layout(width="auto")
style = {"description_width": "initial"}
download_bars = [
    widgets.FloatSlider(step=0.01, disabled=True, layout=layout, style=style)
    for _ in downloads
]
display(*download_bars)

while downloads:
    for index, download in enumerate(downloads[:]):
        if not download.is_seed():
            s = download.status()
            download_bars[index].description = f"{download.name()} {s.download_rate / 1000:.2f} kB/s {state_str[s.state]}"
            download_bars[index].value = s.progress * 100
        else:
            ses.remove_torrent(download)
            downloads.remove(download)
            download_bars[index].close()
            print(download.name(), "complete")
    time.sleep(1)
